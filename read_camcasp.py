#!/usr/local/bin/python
# This script reads in ISA multipoles generated by CAMCASP and converts it to GDMA format
# It also extracts the GDMA output from CAMCASP
# Usage: read_camcasp.py <CAMCASP Output>
import sys

__author__ = "Kailong Mao"
base_name = sys.argv[1].split(".")[0]

def format_num_str(num_str):
	if num_str[0] == "-":
		return num_str[:9]
	return " " + num_str[:8]

def write_coor(line, out_f):
	data = line.split()
	out_f.write(data[0].ljust(11) + "x = " + format_num_str(data[1]) + \
		                          "  y = " + format_num_str(data[2]) + \
		                          "  z = " + format_num_str(data[3]) + "\n\n")

def write_multipole(line, out_f):
	data = line.split()
	pole_rank = len(data) / 2

	out_f.write(" " * 19)
	out_f.write("Q" + str(pole_rank) + "0  =  " + format_num_str(data[0]))

	# Make sure that each line has only three components
	n_components = 0
	for i in range(1, len(data)):
		n_components += 1
		if n_components == 3:
			n_components = 0
			out_f.write("\n" + " " * 17)

		if float(data[i]) == 0.0:
			continue
		out_f.write("  Q" + str(pole_rank) + str((i+1)/2))
		if (i+1)%2 == 0:
			out_f.write("c =  ")
		else:
			out_f.write("s =  ")
		out_f.write(format_num_str(data[i]))
	out_f.write("\n")

in_file = open(sys.argv[1], "r")
out_file = open(base_name+"_isa.multipoles", "w")

# Write the first six lines for the DMA output file
# The actual method used is ISA, but we need to trick POLEDIT so that it will convert the lines
out_file.write("                         Distributed Multipole Analysis\n\n")
out_file.write("Standard DMA\n\n")
out_file.write("Positions and radii in bohr\n")
out_file.write("Multipole moments in atomic units, ea_0^k for rank k\n")

# First, consume all output lines from CAMCASP until the ISA multipoles are reached
line = ""
while "! Multipole moments for " not in line:
	line = in_file.readline()

# Make sure ISA is the method used
if "ISA" not in in_file.readline():
	print("Failed to confirm method is ISA")

# Start reading multipoles until the end is reached
while True:
	line = in_file.readline()
	if "Total" in line:
		break

	if len(line.split()) == 0:
		out_file.write("\n")

	# Test if line represents start of a new atom
	elif (line.split()[0][0].isalpha()):
		write_coor(line, out_file)

	# Write one multipole
	else:
		write_multipole(line, out_file)

out_file.close()

# Consume all irrelevant lines
while "Begin GDMA" not in line:
	line = in_file.readline()

num_files = 0
is_reading_dma = False
# Now, extract all the DMA multipoles from CAMCASP
while line != "":
	line = in_file.readline()

	if "Total multipoles" in line:
		is_reading_dma = False
		out_file.close()
		continue 

	elif "Distributed Multipole Analysis" in line:
		out_file = open(base_name+"_dma_" + str(num_files) + ".multipoles", "w")
		out_file.write(line)
		num_files += 1
		is_reading_dma = True
		continue

	if is_reading_dma:
		out_file.write(line)


in_file.close()
out_file.close()

